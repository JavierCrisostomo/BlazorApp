@page "/fetchcardetails"
@using BlazorApp.Shared.Models
@inject HttpClient Http

<h1>car Data</h1>
<p>Blazor CRUD operation</p>

<div class="row">
    <div class="col-md-6">
        <a href='/car/add' class="btn btn-primary" role="button">
            <i class="fas fa-car-plus"></i>
            Add Car
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search car by make"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterCar" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />

@if (carList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>Id</th>
                <th>Make</th>
                <th>Model</th>
                <th>Year</th>
                <th>Doors</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in carList)
            {
                <tr>
                    <td>@car.Id</td>
                    <td>@car.Make</td>
                    <td>@car.Model</td>
                    <td>@car.Year</td>
                    <td>@car.Doors</td>
                    <td>
                        <a href='/car/edit/@car.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/car/delete/@car.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected List<Car> carList = new();
    protected List<Car> searchCarData = new();
    protected Car car = new();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetCar();
    }

    protected async Task GetCar()
    {
        carList = await Http.GetFromJsonAsync<List<Car>>("api/Car");
        searchCarData = carList;
    }

    protected void FilterCar()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            carList = searchCarData
                .Where(x => x.Make.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            carList = searchCarData;
        }
    }

    protected void DeleteConfirm(int carID)
    {
        car = carList.FirstOrDefault(x => x.Id == carID);
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        carList = searchCarData;
    }
    
}